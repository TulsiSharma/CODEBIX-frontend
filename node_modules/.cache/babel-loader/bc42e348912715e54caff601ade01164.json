{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function lineIndent(cm, lineNo) {\n    var text = cm.getLine(lineNo);\n    var spaceTo = text.search(/\\S/);\n    if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1)))) return -1;\n    return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"));\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"indent\", function (cm, start) {\n    var myIndent = lineIndent(cm, start.line);\n    if (myIndent < 0) return;\n    var lastLineInFold = null; // Go through lines until we find a line that definitely doesn't belong in\n    // the block we're folding, or to the end.\n\n    for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n      var indent = lineIndent(cm, i);\n\n      if (indent == -1) {} else if (indent > myIndent) {\n        // Lines with a greater indent are considered part of the block.\n        lastLineInFold = i;\n      } else {\n        // If this line has non-space, non-comment content, and is\n        // indented less or equal to the start line, it is the start of\n        // another block.\n        break;\n      }\n    }\n\n    if (lastLineInFold) return {\n      from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n      to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n    };\n  });\n});","map":{"version":3,"sources":["E:/Internship Project/api/codebix/node_modules/codemirror/addon/fold/indent-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","lineIndent","cm","lineNo","text","getLine","spaceTo","search","test","getTokenTypeAt","Pos","countColumn","getOption","registerHelper","start","myIndent","line","lastLineInFold","i","end","lastLine","indent","from","length","to"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEA,WAASC,UAAT,CAAoBC,EAApB,EAAwBC,MAAxB,EAAgC;AAC9B,QAAIC,IAAI,GAAGF,EAAE,CAACG,OAAH,CAAWF,MAAX,CAAX;AACA,QAAIG,OAAO,GAAGF,IAAI,CAACG,MAAL,CAAY,IAAZ,CAAd;AACA,QAAID,OAAO,IAAI,CAAC,CAAZ,IAAiB,cAAcE,IAAd,CAAmBN,EAAE,CAACO,cAAH,CAAkBT,UAAU,CAACU,GAAX,CAAeP,MAAf,EAAuBG,OAAO,GAAG,CAAjC,CAAlB,CAAnB,CAArB,EACE,OAAO,CAAC,CAAR;AACF,WAAON,UAAU,CAACW,WAAX,CAAuBP,IAAvB,EAA6B,IAA7B,EAAmCF,EAAE,CAACU,SAAH,CAAa,SAAb,CAAnC,CAAP;AACD;;AAEDZ,EAAAA,UAAU,CAACa,cAAX,CAA0B,MAA1B,EAAkC,QAAlC,EAA4C,UAASX,EAAT,EAAaY,KAAb,EAAoB;AAC9D,QAAIC,QAAQ,GAAGd,UAAU,CAACC,EAAD,EAAKY,KAAK,CAACE,IAAX,CAAzB;AACA,QAAID,QAAQ,GAAG,CAAf,EAAkB;AAClB,QAAIE,cAAc,GAAG,IAArB,CAH8D,CAK9D;AACA;;AACA,SAAK,IAAIC,CAAC,GAAGJ,KAAK,CAACE,IAAN,GAAa,CAArB,EAAwBG,GAAG,GAAGjB,EAAE,CAACkB,QAAH,EAAnC,EAAkDF,CAAC,IAAIC,GAAvD,EAA4D,EAAED,CAA9D,EAAiE;AAC/D,UAAIG,MAAM,GAAGpB,UAAU,CAACC,EAAD,EAAKgB,CAAL,CAAvB;;AACA,UAAIG,MAAM,IAAI,CAAC,CAAf,EAAkB,CACjB,CADD,MACO,IAAIA,MAAM,GAAGN,QAAb,EAAuB;AAC5B;AACAE,QAAAA,cAAc,GAAGC,CAAjB;AACD,OAHM,MAGA;AACL;AACA;AACA;AACA;AACD;AACF;;AACD,QAAID,cAAJ,EAAoB,OAAO;AACzBK,MAAAA,IAAI,EAAEtB,UAAU,CAACU,GAAX,CAAeI,KAAK,CAACE,IAArB,EAA2Bd,EAAE,CAACG,OAAH,CAAWS,KAAK,CAACE,IAAjB,EAAuBO,MAAlD,CADmB;AAEzBC,MAAAA,EAAE,EAAExB,UAAU,CAACU,GAAX,CAAeO,cAAf,EAA+Bf,EAAE,CAACG,OAAH,CAAWY,cAAX,EAA2BM,MAA1D;AAFqB,KAAP;AAIrB,GAxBD;AA0BC,CA5CD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n"]},"metadata":{},"sourceType":"script"}