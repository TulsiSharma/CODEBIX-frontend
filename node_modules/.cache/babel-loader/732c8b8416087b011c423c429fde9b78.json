{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.registerHelper(\"fold\", \"markdown\", function (cm, start) {\n    var maxDepth = 100;\n\n    function isHeader(lineNo) {\n      var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n      return tokentype && /\\bheader\\b/.test(tokentype);\n    }\n\n    function headerLevel(lineNo, line, nextLine) {\n      var match = line && line.match(/^#+/);\n      if (match && isHeader(lineNo)) return match[0].length;\n      match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n      if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n      return maxDepth;\n    }\n\n    var firstLine = cm.getLine(start.line),\n        nextLine = cm.getLine(start.line + 1);\n    var level = headerLevel(start.line, firstLine, nextLine);\n    if (level === maxDepth) return undefined;\n    var lastLineNo = cm.lastLine();\n    var end = start.line,\n        nextNextLine = cm.getLine(end + 2);\n\n    while (end < lastLineNo) {\n      if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n      ++end;\n      nextLine = nextNextLine;\n      nextNextLine = cm.getLine(end + 2);\n    }\n\n    return {\n      from: CodeMirror.Pos(start.line, firstLine.length),\n      to: CodeMirror.Pos(end, cm.getLine(end).length)\n    };\n  });\n});","map":{"version":3,"sources":["E:/Internship Project/codebix/node_modules/codemirror/addon/fold/markdown-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","registerHelper","cm","start","maxDepth","isHeader","lineNo","tokentype","getTokenTypeAt","Pos","test","headerLevel","line","nextLine","match","length","firstLine","getLine","level","undefined","lastLineNo","lastLine","end","nextNextLine","from","to"],"mappings":"AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EAA6D;AAC3DF,IAAAA,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EAA+C;AAClDD,IAAAA,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAEA;AACHA,IAAAA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,EAAAA,UAAU,CAACC,cAAX,CAA0B,MAA1B,EAAkC,UAAlC,EAA8C,UAASC,EAAT,EAAaC,KAAb,EAAoB;AAChE,QAAIC,QAAQ,GAAG,GAAf;;AAEA,aAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,UAAIC,SAAS,GAAGL,EAAE,CAACM,cAAH,CAAkBR,UAAU,CAACS,GAAX,CAAeH,MAAf,EAAuB,CAAvB,CAAlB,CAAhB;AACA,aAAOC,SAAS,IAAI,aAAaG,IAAb,CAAkBH,SAAlB,CAApB;AACD;;AAED,aAASI,WAAT,CAAqBL,MAArB,EAA6BM,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,UAAIC,KAAK,GAAGF,IAAI,IAAIA,IAAI,CAACE,KAAL,CAAW,KAAX,CAApB;AACA,UAAIA,KAAK,IAAIT,QAAQ,CAACC,MAAD,CAArB,EAA+B,OAAOQ,KAAK,CAAC,CAAD,CAAL,CAASC,MAAhB;AAC/BD,MAAAA,KAAK,GAAGD,QAAQ,IAAIA,QAAQ,CAACC,KAAT,CAAe,aAAf,CAApB;AACA,UAAIA,KAAK,IAAIT,QAAQ,CAACC,MAAM,GAAG,CAAV,CAArB,EAAmC,OAAOO,QAAQ,CAAC,CAAD,CAAR,IAAe,GAAf,GAAqB,CAArB,GAAyB,CAAhC;AACnC,aAAOT,QAAP;AACD;;AAED,QAAIY,SAAS,GAAGd,EAAE,CAACe,OAAH,CAAWd,KAAK,CAACS,IAAjB,CAAhB;AAAA,QAAwCC,QAAQ,GAAGX,EAAE,CAACe,OAAH,CAAWd,KAAK,CAACS,IAAN,GAAa,CAAxB,CAAnD;AACA,QAAIM,KAAK,GAAGP,WAAW,CAACR,KAAK,CAACS,IAAP,EAAaI,SAAb,EAAwBH,QAAxB,CAAvB;AACA,QAAIK,KAAK,KAAKd,QAAd,EAAwB,OAAOe,SAAP;AAExB,QAAIC,UAAU,GAAGlB,EAAE,CAACmB,QAAH,EAAjB;AACA,QAAIC,GAAG,GAAGnB,KAAK,CAACS,IAAhB;AAAA,QAAsBW,YAAY,GAAGrB,EAAE,CAACe,OAAH,CAAWK,GAAG,GAAG,CAAjB,CAArC;;AACA,WAAOA,GAAG,GAAGF,UAAb,EAAyB;AACvB,UAAIT,WAAW,CAACW,GAAG,GAAG,CAAP,EAAUT,QAAV,EAAoBU,YAApB,CAAX,IAAgDL,KAApD,EAA2D;AAC3D,QAAEI,GAAF;AACAT,MAAAA,QAAQ,GAAGU,YAAX;AACAA,MAAAA,YAAY,GAAGrB,EAAE,CAACe,OAAH,CAAWK,GAAG,GAAG,CAAjB,CAAf;AACD;;AAED,WAAO;AACLE,MAAAA,IAAI,EAAExB,UAAU,CAACS,GAAX,CAAeN,KAAK,CAACS,IAArB,EAA2BI,SAAS,CAACD,MAArC,CADD;AAELU,MAAAA,EAAE,EAAEzB,UAAU,CAACS,GAAX,CAAea,GAAf,EAAoBpB,EAAE,CAACe,OAAH,CAAWK,GAAX,EAAgBP,MAApC;AAFC,KAAP;AAID,GAjCD;AAmCC,CA7CD","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n"]},"metadata":{},"sourceType":"script"}